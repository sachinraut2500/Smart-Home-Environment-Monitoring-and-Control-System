# -*- coding: utf-8 -*-
"""Smart Home Environment Monitoring and Control System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3OR4VeCzokBLLmhDBl_dThg6i_3XQrR
"""

import time
import random
import csv
from datetime import datetime
import matplotlib.pyplot as plt

# Simulate sensor readings
def read_temperature():
    return round(random.uniform(18, 30), 2)  # 째C

def read_humidity():
    return round(random.uniform(30, 70), 2)  # %

def read_light_level():
    return round(random.uniform(100, 1000), 2)  # Lux

# Simulate actuator control
def control_light(light_level, threshold=300):
    if light_level < threshold:
        return "ON"
    else:
        return "OFF"

# Save data to CSV
def save_data_to_csv(data, filename="iot_data.csv"):
    file_exists = False
    try:
        with open(filename, 'r'):
            file_exists = True
    except FileNotFoundError:
        pass

    with open(filename, mode='a', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(["timestamp", "temperature", "humidity", "light_level", "light_status"])
        writer.writerow(data)

# Load data from CSV for plotting
def load_data_from_csv(filename="iot_data.csv"):
    timestamps, temps, hums, lights, light_statuses = [], [], [], [], []
    with open(filename, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            timestamps.append(datetime.strptime(row["timestamp"], "%Y-%m-%d %H:%M:%S"))
            temps.append(float(row["temperature"]))
            hums.append(float(row["humidity"]))
            lights.append(float(row["light_level"]))
            light_statuses.append(row["light_status"])
    return timestamps, temps, hums, lights, light_statuses

# Plot data
def plot_data(timestamps, temps, hums, lights, light_statuses):
    plt.figure(figsize=(15,10))

    plt.subplot(3,1,1)
    plt.plot(timestamps, temps, label="Temperature (째C)", color='red')
    plt.ylabel("Temperature (째C)")
    plt.legend()

    plt.subplot(3,1,2)
    plt.plot(timestamps, hums, label="Humidity (%)", color='blue')
    plt.ylabel("Humidity (%)")
    plt.legend()

    plt.subplot(3,1,3)
    plt.plot(timestamps, lights, label="Light Level (Lux)", color='orange')
    plt.ylabel("Light Level (Lux)")
    plt.xlabel("Time")
    plt.legend()

    plt.suptitle("IoT Smart Home Environment Data")
    plt.show()

def main(iterations=10, delay=2):
    print("Starting IoT Smart Home Environment Monitoring...\n")
    for i in range(iterations):
        temp = read_temperature()
        hum = read_humidity()
        light = read_light_level()
        light_status = control_light(light)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"[{timestamp}] Temp: {temp} 째C, Humidity: {hum} %, Light: {light} Lux, Light Status: {light_status}")

        # Save the data
        save_data_to_csv([timestamp, temp, hum, light, light_status])

        time.sleep(delay)

    # After data collection, plot the data
    timestamps, temps, hums, lights, light_statuses = load_data_from_csv()
    plot_data(timestamps, temps, hums, lights, light_statuses)

if __name__ == "__main__":
    main()